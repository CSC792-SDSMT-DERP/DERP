"""
Repl.py

Class definition for the Repl object.
"""
from derp.session.UXAction import UXActionType
from derp.session.UXAction import UXAction
from derp.session.SessionController import SessionController
from frontend.PostReader import PostReader


class Repl:
    """
    The Repl handles IO operations for the backend by accepting UXActions
    generated by the SessionController. The Repl passes information to the
    SessionController as strings representing user input. The Repl is also
    responsible for passing an iterator to the ReadController when the user
    reads results of a query.
    """

    def __init__(self):
        self.__session_controller = None  # type: SessionController
        self.__post_reader = None  # type: PostReader

    def set_session_controller(self, session_controller):
        """
        Sets the SessionController object this Repl will communicate with.
        :param session_controller: The SessionController assigned to the Repl
        :type session_controller: SessionController
        :return:
        """
        self.__session_controller = session_controller

    def set_post_reader(self, post_reader):
        self.__post_reader = post_reader

    def print_message(self, ux_action):
        """
        Prints a ux_action's text
        :param ux_action: UXAction object with the text to print
        :type ux_action: UXAction
        :return: None
        """
        print(ux_action.get_text())

    def _handle_input(self, string_input):
        """
        Handle a line of input by sending it to the SessionController
        :param string_input: A line of user input
        :type string_input: str
        :return: None
        """
        action = self.__session_controller.run_input(string_input)  # type: UXAction
        action_type = action.get_type()
        # TODO: replace if statements with dictionary based switch
        # TODO: determine how to handle warnings
        if action_type is UXActionType.READ:
            self.__post_reader.read_from(action.get_post_iterator())
        elif action_type is UXActionType.RECALL:
            pass  # TODO: get buffer contents from session_controller
        elif action_type is UXActionType.ERROR:
            pass  # TODO: handle errors
        elif action_type is UXActionType.CHANGE_MODE:
            pass  # TODO: handle changing mode
        elif action_type is UXActionType.NO_OP:
            self.print_message(action.get_text())
        else:
            raise Exception("ERROR: unexpected UXActionType")

    def read_eval_print_loop(self):
        """
        Set the Repl object to reading from standard in until the program terminates
        :return: None
        """
        while True:
            string_input = input(">>>")
            self._handle_input(string_input)
